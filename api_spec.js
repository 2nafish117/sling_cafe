const Entities = [
    'user',             	// employees 
    'vendor',				// the vendor
    'meal_eat', 	// when an employee eats
	// 'meals',					// enum of all meal types (breakfast, lunch, snakcs, dinner)
	'meal_items', 			// enum of all food items available
]

const users = {
	_id: 'autogenerated id',
	empid: 'user id',
	fname: 'firstname',
	lname: 'lastname', 
	email: ''
}

const vendors = {
	_id: 'autogenerated id',
	vid: 'vendorid',
	fname: '',
	lname: '',
}

const meals = {
	_id: 'autogenerated id',
	empid: 'user id who ate',
	mealtype: 'food user ate', 
	time: 'timestamp',
	cost: 'cost of mealtype'
}

// get bill for 1 employees

db.meals.aggregate([
	{ $match: { empid: empid , time: { $gt: start_date, $lte: end_date } } },
	{ $group: { _id: "$_id", empid: { $first: "$empid" }, total: { $sum: "$cost" } } }
])

// working
db.meals.aggregate([
	{ $match: { empid: "1" , time: { $gt: ISODate("2020-02-26T03:46:07.434Z"), $lte: ISODate("2020-03-05T07:25:28.972Z") } } },
	{ $group: { _id: "$empid", amtdue: { $sum: "$cost" } } }
])

// get total amount all employees in total owe from start to end
db.meals.aggregate([ 
	{ $match: { time: { $gt: start_date, $lte: end_date } } },
	{ $group : { _id : ObjectId(), total : { $sum : "$cost" } } } 
])

// works
db.meals.aggregate([ 
	{ $match: { time: { $gt: ISODate("2020-03-06T05:59:59.108Z"), $lte: ISODate("2020-03-06T09:31:45.211Z") } } }, 
	{ $group : { _id : ObjectId(), total : { $sum : "$cost" } } } 
])

// get bill for all employees from start_date to end_date

db.meals.aggregate([
	{ $match: { time: { $gt: start_date, $lte: end_date } } },
	{ $group: { _id: "$_id", empid: { $first: "$empid" }, amtdue: { $sum: "$cost" } } }
])

// example
db.meals.aggregate([
	{ $match: { time: { $gt: ISODate("2020-01-26T03:47:42.213Z"), $lte:  ISODate("2020-04-05T07:34:35.304Z") } } },
	{ $group: { _id: "$empid", amtdue: { $sum: "$cost" } } }
])

// get all employee details along with receipts for all employees
db.meals.aggregate([
	{ $match: { time: { $gt: ISODate("2020-01-26T03:47:42.213Z"), $lte:  ISODate("2020-04-05T07:34:35.304Z") } } },
	{ $lookup: { from: "users" , localField: "empid", foreignField: "empid", as: "emp" } },
	{ $unwind: { path: "$emp" } },
	{ $group: { _id: "$empid", fname : {$first: "$emp.fname"}, lname : {$first: "$emp.lname"}, email : {$first: "$emp.email"}, amtdue: { $sum: "$cost" } } }
])

db.meals.aggregate([
	{ $match: { time: { $gt: ISODate("2020-01-26T03:47:42.213Z"), $lte:  ISODate("2020-04-05T07:34:35.304Z") } } },
	{ $lookup: { from: "users" , localField: "empid", foreignField: "empid", as: "emp" } },
	{ $unwind: { path: "$emp" } },
	{ $group: { _id: { empid: "$empid", mealtype: "$mealtype" }, fname : {$first: "$emp.fname"}, lname : {$first: "$emp.lname"}, email : {$first: "$emp.email"}, cost: { $sum: "$cost" }, num: { $sum: 1 } } },
	{ $group: { _id: "$_id.empid", } }
])

// get top 3 defaulters of from start to end
db.meals.aggregate([ 
	{ $match: { time: { $gt: ISODate("2020-01-26T03:47:42.213Z"), $lte:  ISODate("2020-04-05T07:34:35.304Z") } } }, 
	{ $group: { _id: "$empid", amtdue: { $sum: "$cost" } } }, 
	{ $sort : {amtdue : -1} },
	{ $limit: 3 } 
])

// add an index to the collection
db.collection.createIndex({empid: 1, address: 1})

// get time stamp from OjectId
ObjectId("5349b4ddd2781d08c09890f4").getTimestamp()

// Later:
// const meals = {
// 	_id: 'autogenerated id',
// 	mealtypeid: 'meal type',
// 	cost: 'cost of mealtype'
//  meal_items: [
// 		"dosa", "vada", "rice", "biriyani" 	
// ]
// }

